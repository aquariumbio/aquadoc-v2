#!/usr/bin/env ruby
# frozen_string_literal: true
require 'json'
require 'find'
require_relative 'aquadoc'

opts = {}
ARGV.each do |arg|
  case arg

  when '--no-workflows'
    opts[:workflows] = false

  when '--no-libraries'
    opts[:libraries] = false

  when '--no-inventory'
    opts[:inventory] = false

  when '--no-yard'
    opts[:yard_docs] = false

  when '--local'
    opts[:local] = true

  when '--help'

    puts <<~HELP
      aquadoc [options...]
        --no-inventory     Do not include inventory definitions.
        --no-libraries     Do not include library code.
        --no-workflows     Do not include workflow (operation type) code.
        --local            Generate documentation on local machine, not on git
        --no-yard          Do not automatically generation library documentation
                           using yard.
    HELP
    exit(0)

  else

    puts "Unknown option: #{arg}"
    exit(-1)

  end
end

begin
  config = File.read('./config.json')
  config = JSON.parse(config, symbolize_names: true)
rescue StandardError => error
  raise "Could not find valid config file: #{error}"
end

categories = []

# parsing for aq files
#Dir['categories/*.json'].each do |c|
#  file = File.read(c)
#  categories << JSON.parse(file, symbolize_names: true)
#end

# parsing for pfish
sample_types = []
object_types = []
libraries = []
operation_types = []

# TODO: add else with prune so it doesn't follow wrong paths
# TODO: fix problem with two word keys in sample and object types
# TODO: Save absolute path for libraries and operation types
Find.find('categories') do |path|
    if path.include? 'sample_types' and path.include? '.json'
      file = File.read(path)
      sample_types << JSON.parse(file, symbolize_names: true)
    elsif path.include? 'object_types' and path.include? '.json'
      file = File.read(path)
      object_types << JSON.parse(file, symbolize_names: true)
    elsif path.include? 'libraries'
        if path.include? 'definition'
          file = File.read(path)
          definitions = JSON.parse(file, symbolize_names: true)
        elsif path.include? 'source'
          source = File.read(path)
        else
          next
        end
      libraries << {:definitions => definitions, :source => source, :path => path}
    elsif path.include? 'operation_types'
      if path.include? 'definition'
        file = File.read(path)
        definitions = JSON.parse(file, symbolize_names: true)
      elsif path.include? 'protocol'
        protocol = File.read(path)
      elsif path.include? 'precondition'
        precondition = File.read(path)
      else
        next
      end
      operation_types << {:path => path, :definition => definitions, :protocol => protocol, :precondition => precondition}
    end
  end

ag = if opts[:local]
       Aquadoc::Local.new(config, categories, opts)
     else
       Aquadoc::Git.new(config, categories, opts)
     end

# ag is an instance of the git class
# run is called on the instance
if ag.authorized
  ag.run
else
  puts 'Could not authenticate with github'
end

